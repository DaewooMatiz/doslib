Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-1


				       page    ,132
				;-----------------------------Module-Header-----------------------------;
				; Module Name:	MOUSE.ASM
				;
				; Windows mouse driver data and initialization routines.
				; DOSLIB version, DOSBox-X pointer integration, Jonathan Campbell.
				; This is *based* on Microsoft's DDK mouse.drv source code, but it has
				; been SUBSTANTIALLY MODIFIED only to listen to the PS/2 port and use
				; the DOSBox integration device.
				;
				; Exported Functions:
				;
				; Public Functions:
				;
				; Public Data:
				;
				; General Description:
				;
				;   This segment contains all static data used by the mouse routines.  The
				;   hardware interrupt routine is included in the static data so that it
				;   has addressability to the static data through the CS register.  Thus
				;   the data segment of this module MUST be fixed in memory, while the
				;   code segment can be moveable and/or discardable.
				;
				;-----------------------------------------------------------------------;
				
					title	Mouse - Main Mouse Module
				
					.list
				
					externFP AllocDStoCSAlias
				
					externNP ps2_search
				
					externA  __WINFLAGS
				
				sBegin	Data
 0000                        2	_DATA segment 
				
				globalW 	WinFlags,__WINFLAGS	;Windows environment flags
 0000  0000 E                3	WinFlags dw __WINFLAGS 
				globalB 	vector,-1		;Vector # of mouse interrupt
 0002  FF                    3	vector db -1 
				globalB 	mask_8259,0FFh		;8259 interrupt enable mask, FF if none
 0003  FF                    3	mask_8259 db 0FFh 
				globalB 	old_8259_mask,0FFh	;Value of mouse irq bit before enable
 0004  FF                    3	old_8259_mask db 0FFh 
				globalB 	mouse_flags,0		;Various flags
 0005  00                    3	mouse_flags db 0 
				globalB 	mouse_type,0		;Type of mouse (inport/bus/serial/etc.)
 0006  00                    3	mouse_type db 0 
				
 0007  00					even			;Want words on word boundary
				
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-2


				globalD 	event_proc,0		;Mouse event procedure when enabled
 0008  00000000              3	event_proc dd 0 
				globalD 	bios_proc,0		;Contents of old interrupt vector
 000C  00000000              3	bios_proc dd 0 
				
				globalW 	enable_proc,0		;Address of routine to	enable mouse
 0010  0000                  3	enable_proc dw 0 
				globalW 	disable_proc,0		;Address of routine to disable mouse
 0012  0000                  3	disable_proc dw 0 
				globalW 	interrupt_rate,30	;Maximum interrupt rate of mouse
 0014  001E                  3	interrupt_rate dw 30 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-3


				page
				;--------------------------Interrupt-Routine----------------------------;
				;
				; device_int - Mouse Specific Interrupt Handler
				;
				; The mouse specific interrupt code will follow.  It will be copied
				; into the reserved area as initialization time, and executed from
				; here.
				;
				; Entry:
				;	DS = Data
				;	CS = Data
				; Returns:
				;	AX = status
				;	BX = delta X
				;	CX = delta Y
				; Error Returns:
				;	None
				; Registers Preserved:
				;	None
				; Registers Destroyed:
				;	All
				; Calls:
				;	none
				; WARNING:
				;	Unused memory from device_int will be freed.  Therefore device
				;	int must be the last thing allocated in the Data segment
				; History:
				;	Fri 21-Aug-1987 11:43:42 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Data
					assumes ds,Data
					assumes es,nothing
					assumes ss,nothing
				
					even
				
				globalW 	IntCS,0 		; DS alias for this routine
 0016  0000                  3	IntCS dw 0 
				
					public	device_int
				
 0018				device_int	proc	near
				
 0018  00D2[				db	MAX_INT_SIZE dup (?)	;Specific int handler goes here
	   ??			
			 ]	
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-4


				
				
 00EA				device_int	endp
				
				sEnd	Data
 00EA                        1	_DATA ends 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-5


				page
				
				sBegin	Code
 0000                        2	_TEXT segment 
				assumes cs,Code
				
				;--------------------------Exported-Routine-----------------------------;
				; int Inquire(lp_mouse_info);
				;
				; Information regarding the mouse is returned to the caller.
				;
				; I like how the DDK documentation that came with this source is COMPLETELY WRONG
				; about which struct this takes. It takes MOUSEINFO* not CURSORINFO*. >:( --Jonathan C
				;
				; Entry:
				;	None
				; Returns:
				;	AX = # bytes returned in lp_mouse_info
				; Error Returns:
				;	None
				; Registers Preserved:
				;	SI,DI,DS,BP
				; Registers Destroyed:
				;	AX,BX,CX,DX,ES,FLAGS
				; Calls:
				;	None
				; History:
				;	Fri 21-Aug-1987 11:43:42 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
				cProc	Inquire,<FAR,PUBLIC,WIN,PASCAL>,<di>
				
					parmD	lp_mouse_info
				
				cBegin
 0000                        1	Inquire proc far 
 0000  8C D8                 1		mov	ax,ds 
 0002  90                    1		nop 
 0003  45                    1		inc	bp 
 0004  55                    1		push	bp 
 0005  8B EC                 1		mov	bp,sp 
 0007  1E                    1		push	ds 
 0008  8E D8                 1		mov	ds,ax 
 000A  57                    3		push	di 
 000B  C4 7E 06				les	di,lp_mouse_info	;Get far pointer of destination area
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-6


					assumes es,nothing
				
 000E  A0 0005 R			mov	al,mouse_flags		;Get and save msExists, msRelative
 0011  98				cbw
 0012  86 C4				xchg	al,ah			;AL = 0FFh if mouse exists, 00 if not
					.errnz	MF_MOUSE_EXISTS-80h
				
 0014  B4 00				mov	ah,000h 		;AH = 000h if absolute coordinates
 0016  AB				stosw
					.errnz	msExists
					.errnz	msRelative-msExists-1
				
 0017  B8 0002				mov	ax,NUMBER_BUTTONS	;Return number of buttons
 001A  AB				stosw
					.errnz	msNumButtons-msRelative-1
				
 001B  A1 0014 R			mov	ax,interrupt_rate	;Return maximum interrupt rate
 001E  AB				stosw
					.errnz	msRate-msNumButtons-2
				
 001F  B8 0002				mov	ax,X_SPEED		;Return threshold before acceleration
 0022  AB				stosw
					.errnz	msXThresh-msRate-2
				
 0023  AB				stosw
					.errnz	msYThresh-msXThresh-2
				
 0024  33 C0				xor	ax,ax			;Return useless x,y resolution info
 0026  AB				stosw
 0027  AB				stosw
					.errnz	msXRes-msYThresh-2
					.errnz	msYRes-msXRes-2
					.errnz	msYRes+2 - size MOUSEINFO
				
 0028  B8 000E				mov	ax,size MOUSEINFO	;Return size of info
				
				cEnd
 002B  5F                    3		pop	di 
 002C  8D 66 FE              1		lea	sp,-2[bp] 
 002F  1F                    1		pop	ds 
 0030  5D                    1		pop	bp 
 0031  4D                    1		dec	bp 
 0032  CA 0004               1		ret	4 
 0035                        1	Inquire endp 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-7


				page
				
				;--------------------------Exported-Routine-----------------------------;
				; void Enable(lp_event_proc);
				;
				; Enable hardware mouse interrupts, with the passed procedure address
				; being the target of all mouse events.
				;
				; This routine may be called while already enabled.  In this case the
				; passed event procedure should be saved, and all other initialization
				; skipped.
				;
				; Entry:
				;	None
				; Returns:
				;	None
				; Error Returns:
				;	None
				; Registers Preserved:
				;	SI,DI,DS,BP
				; Registers Destroyed:
				;	AX,BX,CX,DX,ES,FLAGS
				; Calls:
				;	Indirect through enable_proc
				; History:
				;	Fri 21-Aug-1987 11:43:42 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
				cProc	Enable,<FAR,PUBLIC,WIN,PASCAL>,<si,di>
				
					parmD	new_event_proc
				
				cBegin
 0035                        1	Enable proc far 
 0035  8C D8                 1		mov	ax,ds 
 0037  90                    1		nop 
 0038  45                    1		inc	bp 
 0039  55                    1		push	bp 
 003A  8B EC                 1		mov	bp,sp 
 003C  1E                    1		push	ds 
 003D  8E D8                 1		mov	ds,ax 
 003F  56                    3		push	si 
 0040  57                    3		push	di 
				
				;	The new event procedure is always saved regardless of the
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-8


				;	mouse already being enabled.  This allows the event proc
				;	to be changed as needed.
				
 0041  FA				cli				;Protect against interrupt while
 0042  8B 46 06				mov	ax,off_new_event_proc	;  changing the vector
 0045  A3 0008 R			mov	wptr event_proc[0],ax
 0048  8B 46 08				mov	ax,seg_new_event_proc
 004B  A3 000A R			mov	wptr event_proc[2],ax
 004E  FB				sti
				
				;	If the mouse is already enabled, or it doesn't exist, then
				;	we're all done with the enable call.
				
 004F  A0 0005 R			mov	al,mouse_flags		;If enabled or mouse doesn't exist,
 0052  34 80				xor	al,MF_MOUSE_EXISTS	;  then skip the enabling
 0054  A8 81				test	al,MF_ENABLED+MF_MOUSE_EXISTS
 0056  75 09				jnz	enable_done
 0058  FF 16 0010 R			call	enable_proc		;Mouse specific initialization
 005C  80 0E 0005 R 01			or	mouse_flags,MF_ENABLED	;Show enabled now
				
 0061				enable_done:
				
				cEnd
 0061  5F                    3		pop	di 
 0062  5E                    3		pop	si 
 0063  8D 66 FE              1		lea	sp,-2[bp] 
 0066  1F                    1		pop	ds 
 0067  5D                    1		pop	bp 
 0068  4D                    1		dec	bp 
 0069  CA 0004               1		ret	4 
 006C                        1	Enable endp 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-9


				page
				
				;--------------------------Exported-Routine-----------------------------;
				; void Disable();
				;
				; Disable hardware mouse interrupts, restoring the previous mouse
				; interrupt handler and 8259 interrupt enable mask.
				;
				; This routine may be called while already disabled.  In this case the
				; disabling should be ignored.
				;
				; Entry:
				;	None
				; Returns:
				;	None
				; Error Returns:
				;	None
				; Registers Preserved:
				;	SI,DI,DS,BP
				; Registers Destroyed:
				;	AX,BX,CX,DX,ES,FLAGS
				; Calls:
				;	Indirect through disable_proc
				; History:
				;	Fri 21-Aug-1987 11:43:42 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
				cProc	Disable,<FAR,PUBLIC,WIN,PASCAL>,<si,di>
				
				cBegin
 006C                        1	Disable proc far 
 006C  8C D8                 1		mov	ax,ds 
 006E  90                    1		nop 
 006F  45                    1		inc	bp 
 0070  55                    1		push	bp 
 0071  8B EC                 1		mov	bp,sp 
 0073  1E                    1		push	ds 
 0074  8E D8                 1		mov	ds,ax 
 0076  56                    3		push	si 
 0077  57                    3		push	di 
 0078  F6 06 0005 R 01			test	mouse_flags,MF_ENABLED
 007D  74 09				jz	disable_done		;Mouse is already disabled
 007F  FF 16 0012 R			call	disable_proc		;Disable as needed
 0083  80 26 0005 R FE			and	mouse_flags,not MF_ENABLED
				
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-10


 0088				disable_done:
				
				cEnd
 0088  5F                    3		pop	di 
 0089  5E                    3		pop	si 
 008A  8D 66 FE              1		lea	sp,-2[bp] 
 008D  1F                    1		pop	ds 
 008E  5D                    1		pop	bp 
 008F  4D                    1		dec	bp 
 0090  CB                    1		ret	0 
 0091                        1	Disable endp 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-11


				page
				
				;--------------------------Exported-Routine-----------------------------;
				; WORD WEP();
				;
				; Generic WEP.
				;
				; Entry:
				;	None
				; Returns:
				;	AX = 1
				; Error Returns:
				;	None
				; Registers Preserved:
				;	all
				; Registers Destroyed:
				;	none
				; Calls:
				;	nothing
				; History:
				;  Wed 18-Oct-1989 11:44:39  -by-  David N. Weise  [davidw]
				; Wrote it!
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
				cProc	WEP,<FAR,PUBLIC,WIN,PASCAL>
				;	parmW	stuff
				cBegin nogen
 0091                        1	WEP proc far 
 0091  B8 0001				mov	ax,1
 0094  CA 0002				ret	2
				cEnd nogen
 0097                        1	WEP endp 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-12


				page
				
				;--------------------------Exported-Routine-----------------------------;
				; int MouseGetIntVect();
				;
				; The interrupt vector used by the mouse is returned to the caller.
				; If no mouse is found, then -1 is returned.
				;
				; Entry:
				;	None
				; Returns:
				;	AX = interrupt vector
				;	AX = -1 if no mouse was found
				; Error Returns:
				;	None
				; Registers Preserved:
				;	SI,DI,DS,BP
				; Registers Destroyed:
				;	AX,BX,CX,DX,ES,FLAGS
				; Calls:
				;	None
				; History:
				;	Fri 21-Aug-1987 11:43:42 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
				cProc	MouseGetIntVect,<FAR,PUBLIC,WIN,PASCAL>
				
				cBegin
 0097                        1	MouseGetIntVect proc far 
 0097  8C D8                 1		mov	ax,ds 
 0099  90                    1		nop 
 009A  45                    1		inc	bp 
 009B  55                    1		push	bp 
 009C  8B EC                 1		mov	bp,sp 
 009E  1E                    1		push	ds 
 009F  8E D8                 1		mov	ds,ax 
				
				;	NOTE! vector must be less than 7Fh for the sign extension to work
				
 00A1  A0 0002 R			mov	al,vector		;Will be -1 if mouse wasn't found
 00A4  98				cbw				;AX = -1 if no mouse was found
				cEnd
 00A5  8D 66 FE              1		lea	sp,-2[bp] 
 00A8  1F                    1		pop	ds 
 00A9  5D                    1		pop	bp 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-13


 00AA  4D                    1		dec	bp 
 00AB  CB                    1		ret	0 
 00AC                        1	MouseGetIntVect endp 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-14


				page
				
				;---------------------------Public-Routine-----------------------------;
				; hook_us_in
				;
				; This is a utility routine for the specific mouse handlers.  The
				; following initialization will be performed in preperation of
				; hooking in the interrupt handler:
				;
				;	save old 8259 mask
				;	disable our IRQ at the 8259
				;	save old interrupt vector contents
				;	set  new interrupt vector
				;
				; Entry:
				;	None offset in Data segment of interrupt handler
				; Returns:
				;	None
				; Error Returns:
				;	None
				; Registers Preserved:
				;	DI,SI,DS,BP
				; Registers Destroyed:
				;	AX,BX,CX,DX,ES,FLAGS
				; Calls:
				;	Int 21h
				; History:
				;	Mon 24-Aug-1987 22:41:22 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
						public	hook_us_in
 00AC				hook_us_in	proc	near
				
 00AC  8A 26 0003 R			mov	ah,mask_8259		;Get our 8259 enable mask
 00B0  80 F4 FF				xor	ah,0FFh 		;A 1 bit for our IRQ (not AH)
 00B3  74 10				jz	hook_us_in_no_irq	;No IRQ is involved
 00B5  FA				cli
 00B6  E4 21				in	al,MASK_PORT		;Get current 8259 mask
 00B8  8A D8				mov	bl,al
 00BA  0A C4				or	al,ah
 00BC  22 DC				and	bl,ah			;Isolate old mouse IRQ bit
 00BE  E6 21				out	MASK_PORT,al		;Disable mouse int
 00C0  FB				sti
				
 00C1  88 1E 0004 R			mov	old_8259_mask,bl	;Will be 0 if previously enabled
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-15


				
 00C5				hook_us_in_no_irq:
 00C5  B4 35				mov	ah,35h			;Save old interrupt vector
 00C7  A0 0002 R			mov	al,vector
 00CA  CD 21				int	21h
 00CC  89 1E 000C R			mov	wptr bios_proc[0],bx
 00D0  8C 06 000E R			mov	wptr bios_proc[2],es
				
 00D4  1E				push	ds
 00D5  FF 36 0016 R			push	IntCS
 00D9  1F				pop	ds
 00DA  B4 25				mov	ah,25h			;Set our interrupt vector
 00DC  A0 0002 R			mov	al,vector
 00DF  BA 0018 R			mov	dx,DataOFFSET device_int
 00E2  CD 21				int	21h
 00E4  1F				pop	ds
 00E5  FB				sti
				
 00E6  C3				ret
				
 00E7				hook_us_in	endp
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-16


				page
				
				;---------------------------Public-Routine-----------------------------;
				; enable_our_int
				;
				; The 8259 is enabled for our interrupt, as specified by mask_8259.
				;
				; This routine will only be called by those functions which actually
				; require an IRQ.
				;
				; Entry:
				;	None
				; Returns:
				;	None
				; Error Returns:
				;	None
				; Registers Preserved:
				;	BX,CX,DX,SI,DI,ES,DS,BP
				; Registers Destroyed:
				;	AX,FLAGS
				; Calls:
				;	None
				; History:
				;	Mon 24-Aug-1987 22:41:22 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
						public	enable_our_int
 00E7				enable_our_int	proc	near
				
 00E7  8A 26 0003 R			mov	ah,mask_8259		;Get our enable mask
 00EB  FA				cli
 00EC  E4 21				in	al,MASK_PORT		;Get current 8259 mask
 00EE  22 C4				and	al,ah			;Set our IRQ bit to 0 (enabled)
 00F0  E6 21				out	MASK_PORT,al
 00F2  FB				sti
 00F3  C3				ret
				
 00F4				enable_our_int	endp
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-17


				page
				
				;---------------------------Public-Routine-----------------------------;
				; unhook_us
				;
				; This is a utility routine for the specific mouse handlers.  The
				; interrupt vector will be restored to its previous value and the
				; old IRQ enable bit will be restored.
				;
				; Entry:
				;	None
				; Returns:
				;	'Z' set   if IRQ should be left enabled  at the device
				;	'Z' clear if IRQ should be left disabled at the device
				; Error Returns:
				;	None
				; Registers Preserved:
				;	SI,DI,DS,BP
				; Registers Destroyed:
				;	AX,BX,CX,DX,ES,FLAGS
				; Calls:
				;	Int 21h
				; History:
				;	Mon 24-Aug-1987 22:41:22 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
						public	unhook_us
 00F4				unhook_us	proc	near
				
 00F4  8A 26 0003 R			mov	ah,mask_8259		;Disable our interrupt at the
 00F8  80 F4 FF				xor	ah,0FFh 		;  8259 before changing the (not AH)
 00FB  74 08				jz	unhook_no_irq		;  vector since old versions
 00FD  FA				cli				;  of DOS may not cli/sti
 00FE  E4 21				in	al,MASK_PORT		;  while setting int vectors
 0100  0A C4				or	al,ah
 0102  E6 21				out	MASK_PORT,al
 0104  FB				sti
				
 0105				unhook_no_irq:
 0105  83 3E 000E R 00			cmp	wptr bios_proc[2],0	; PS2 mouse may have failed enable
 010A  74 0D				jz	unhook_no_bios_proc	;  so bios proc might not be set.
 010C  1E				push	ds
 010D  B4 25				mov	ah,25h			;Restore old interrupt vector
 010F  A0 0002 R			mov	al,vector
 0112  C5 16 000C R			lds	dx,bios_proc
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-18


					assumes ds,nothing
				
 0116  CD 21				int	21h
				
 0118  1F				pop	ds
					assumes ds,Data
				
 0119				unhook_no_bios_proc:
				
				;	If IRQ mask will be set to whatever value it was when we were
				;	enabled.  If there is no Int 33h mouse driver in the system,
				;	then flag the caller that interrupts should be disabled at the
				;	device.  If there is an Int33h mouse driver and interrupts
				;	were disabled upon entry, also flag the caller to disable
				;	interrupts at the device.  Only allow device interrupts to
				;	continue being generated if there is an Int33h mouse and
				;	the IRQ was previously enabled.
				;
				;	This is in part a fix for running on IRQ2 in Compaqs and
				;	other machines which try to allow this.  I don't recommend
				;	IRQ2 for ATs and compatibles, but some people try and it
				;	almost seems to work if mouse.com is there to handle the
				;	interrupt.
				
 0119  F6 06 0004 R FF			test	old_8259_mask,0FFh	;If interrupts were previous disabled
 011E  75 11				jnz	unhook_exit		; then leave them disabled ('Z' clear)
 0120  8A 26 0003 R			mov	ah,mask_8259
 0124  FA				cli
 0125  E4 21				in	al,MASK_PORT
 0127  22 C4				and	al,ah
 0129  E6 21				out	MASK_PORT,al
 012B  FB				sti
 012C  A0 0005 R			mov	al,mouse_flags
 012F  F6 D0				not	al                  ;'Z' clear if to disable at the device
				
 0131				unhook_exit:
 0131  C3				ret
				
 0132				unhook_us	endp
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-19


				page
				
				; Input:
				;   None
				; Output:
				;   DX:AX  32-bit value read back
				                		public dosbox_ig_read_data
 0132				dosbox_ig_read_data     proc far
 0132  32 C0			    xor     al,al           ; 0x00 = CMD_RESET_LATCH
 0134  E6 2A			    out     02Ah,al         ; port 0x28 + ID_COMMAND
				
 0136  E5 29			    in      ax,029h         ; port 0x28 + ID_DATA (lower half)
 0138  50			    push    ax
 0139  E5 29			    in      ax,029h         ; port 0x28 + ID_DATA (upper half)
 013B  8B D0			    mov     dx,ax
 013D  58			    pop     ax
				
 013E  CB			    retf
 013F				dosbox_ig_read_data     endp
				
				; Input:
				;   None
				; Output:
				;   DX:AX  32-bit value read back
				                		public dosbox_ig_read_regsel
 013F				dosbox_ig_read_regsel   proc far
 013F  32 C0			    xor     al,al           ; 0x00 = CMD_RESET_LATCH
 0141  E6 2A			    out     02Ah,al         ; port 0x28 + ID_COMMAND
				
 0143  E5 28			    in      ax,028h         ; port 0x28 + ID_INDEX (lower half)
 0145  50			    push    ax
 0146  E5 28			    in      ax,028h         ; port 0x28 + ID_INDEX (upper half)
 0148  8B D0			    mov     dx,ax
 014A  58			    pop     ax
				
 014B  CB			    retf
 014C				dosbox_ig_read_regsel   endp
				
				; Input:
				;   DX:AX  32-bit value to write
				; Output:
				                		public dosbox_ig_write_data
 014C				dosbox_ig_write_data    proc far
 014C  50			    push    ax
 014D  32 C0			    xor     al,al           ; 0x00 = CMD_RESET_LATCH
 014F  E6 2A			    out     02Ah,al         ; port 0x28 + ID_COMMAND
 0151  58			    pop     ax
				
 0152  E7 29			    out     029h,ax         ; port 0x28 + ID_DATA (lower half)
 0154  8B C2			    mov     ax,dx
 0156  E7 29			    out     029h,ax         ; port 0x28 + ID_DATA (upper half)
				
 0158  CB			    retf
 0159				dosbox_ig_write_data    endp
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-20


				
				; Input:
				;   DX:AX  32-bit value to write
				; Output:
				                		public dosbox_ig_write_regsel
 0159				dosbox_ig_write_regsel  proc far
 0159  50			    push    ax
 015A  32 C0			    xor     al,al           ; 0x00 = CMD_RESET_LATCH
 015C  E6 2A			    out     02Ah,al         ; port 0x28 + ID_COMMAND
 015E  58			    pop     ax
				
 015F  E7 28			    out     028h,ax         ; port 0x28 + ID_INDEX (lower half)
 0161  8B C2			    mov     ax,dx
 0163  E7 28			    out     028h,ax         ; port 0x28 + ID_INDEX (upper half)
				
 0165  CB			    retf
 0166				dosbox_ig_write_regsel  endp
				
				;---------------------------Public-Routine-----------------------------;
				; Initialize
				;
				; All boot time initialization will be performed.  This basically
				; involves searching for a mouse in the system.  The ordering in
				; which we will search is as follows:
				;
				;	INT 33h installed mouse driver
				;	Microsoft InPort Mouse
				;	Microsoft Bus Mouse
				;	PS/2 Mouse via ROM BIOS support
				;	Serial Mouse
				;
				; After a mouse handler has been found, the Data segment will be
				; resized to the minimum needed to support the mouse in use.
				;
				; Entry:
				;	CX = size of heap
				;	DI = module handle
				;	DS = automatic data segment
				;	ES:SI = address of command line (not used)
				; Returns:
				;	AX <> 0 to show success
				; Error Returns:
				;	None
				; Registers Preserved:
				;	SI,DI,DS,BP
				; Registers Destroyed:
				;	AX,BX,CX,DX,ES,FLAGS
				; Calls:
				;	I33_search
				;	PS2_search
				; History:
				;	Fri 21-Aug-1987 11:43:42 -by-  Walt Moore [waltm] & Mr. Mouse
				;	Initial version
				;-----------------------------------------------------------------------;
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-21


				
				;------------------------------Pseudo-Code------------------------------;
				; {
				; }
				;-----------------------------------------------------------------------;
				
					assumes cs,Code
					assumes ds,Data
				
				cProc	Initialize,<FAR,PUBLIC,WIN,PASCAL>,<si,di>
				
				cBegin
 0166                        1	Initialize proc far 
 0166  8C D8                 1		mov	ax,ds 
 0168  90                    1		nop 
 0169  45                    1		inc	bp 
 016A  55                    1		push	bp 
 016B  8B EC                 1		mov	bp,sp 
 016D  1E                    1		push	ds 
 016E  8E D8                 1		mov	ds,ax 
 0170  56                    3		push	si 
 0171  57                    3		push	di 
				
				; First: is the DOSBox Integration Device present?
 0172  B0 FF			    mov al,0FFh             ; 0xFF = CMD_RESET_INTERFACE
 0174  E6 2A			    out 02Ah,al             ; port 0x28 + ID_COMMAND
				
 0176  9A 0132 ---- R		    call far ptr dosbox_ig_read_data; read data, DX:AX is 32-bit value. should be 0D05:B0C5
 017B  81 FA 0D05		    cmp dx,0D05h
 017F  75 1F			    jnz fail
 0181  3D B0C5			    cmp ax,0B0C5h
 0184  75 1A			    jnz fail
				
 0186  9A 013F ---- R		    call far ptr dosbox_ig_read_regsel; read regsel, DX:AX is 32-bit value. should be AA55:BB66
 018B  81 FA AA55		    cmp dx,0AA55h
 018F  75 0F			    jnz fail
 0191  3D BB66			    cmp ax,0BB66h
 0194  75 0A			    jnz fail
				
				;-----------------------------------------------------------------------;
				;	Regardless of using the Int33h mouse driver, we need to
				;	know if it is present for disabling IRQs when the mouse
				;	is disabled.
				;-----------------------------------------------------------------------;
				
 0196  C6 06 0006 R 04			mov	mouse_type, MT_PS2	;Assume PS/2 mouse
 019B  E8 0000 E			call	ps2_search		;PS/2 mouse port?
 019E  72 0A				jc	got_mouse
				
 01A0				fail:
				
 01A0  C6 06 0006 R 00			mov	mouse_type, MT_NO_MOUSE ;Reset mouse type to none
 01A5  BE 0018 R			mov	si,DataOFFSET device_int;Resize to this limit
 01A8  EB 61				jmp	short resize_ds
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-22


				
 01AA				got_mouse:
				
				; tell DOSBox-X to notify us of all mouse movement whether or not mouse is captured
 01AA  BA 0043			    mov     dx,00043h       ; 0043:4D56
 01AD  B8 4D56			    mov     ax,04D56h
 01B0  9A 0159 ---- R		    call far ptr dosbox_ig_write_regsel
				
 01B5  33 D2			    xor     dx,dx
 01B7  B8 0001			    mov     ax,1            ; notify as PS/2 mouse events
 01BA  9A 014C ---- R		    call far ptr dosbox_ig_write_data
				;
				;	If running under Windows/386 then tell the Win386 mouse driver what
				;	type of mouse we found.
				;
 01BF  50				push	ax
 01C0  53				push	bx
 01C1  57				push	di
 01C2  06				push	es
				
					%OUT Test flags for Win386 here!
 01C3  33 FF				xor	di, di
 01C5  8E C7				mov	es, di
 01C7  B8 1684				mov	ax, 1684h		;Get device API entry point
 01CA  BB 000C				mov	bx, VMD_DEVICE_ID	;for the Virtual Mouse Device
 01CD  CD 2F				int	2Fh
 01CF  8C C0				mov	ax, es
 01D1  0B C7				or	ax, di			;Q: Does VMD have API entry point?
 01D3  74 13				jz	copy_mouse_routines	;   N: Done
				
 01D5  0E				push	cs			;Return to here after call to Win386
 01D6  BB 01E8 R			mov	bx, offset vmd_call_done;virtual mouse driver
 01D9  53				push	bx
 01DA  06				push	es			;Call this SEG:OFF by doing a far
 01DB  57				push	di			;return
				
 01DC  B8 0100				mov	ax, 100h		;Set mouse type & int VECTOR API call
 01DF  8A 1E 0006 R			mov	bl, mouse_type
 01E3  8A 3E 0002 R			mov	bh, vector
				
 01E7				BogusFarRetProc PROC FAR
 01E7  CB				ret				;"Return" to VMD's API entry point
 01E8				BogusFarRetProc ENDP
				
 01E8				vmd_call_done:
 01E8				copy_mouse_routines:
 01E8  07				pop	es
 01E9  5F				pop	di
 01EA  5B				pop	bx
 01EB  58				pop	ax
				
				
 01EC  80 0E 0005 R 80			or	mouse_flags,MF_MOUSE_EXISTS
 01F1  BF 0018 R			mov	di,DataOFFSET device_int
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-23


				
				
				;	The mouse routines returned the following:
				;
				;	SI = offset within the Code segment of the handler
				;	CX = size of the handler
				;
				;	After the interrupt handler has been copied into the Data
				;	segment, SI-1 will be used as the new size of the Data segment.
				
 01F4  1E				push	ds			;Destination is in Data
 01F5  07				pop	es
					assumes es,Data
 01F6  0E				push	cs			;Source is in Code
 01F7  1F				pop	ds
					assumes cs,Code
 01F8  F3/ A4				rep	movsb
 01FA  06				push	es
 01FB  1F				pop	ds
					assumes ds,Data
				
 01FC  56				push	si
 01FD  57				push	di
 01FE  1E				push	ds
				
					cCall	AllocDStoCSAlias,<ds>
 01FF  1E                    5		push	ds 
 0200  9A 0000 ---- E        1		call	AllocDStoCSAlias 
 0205  A3 0016 R			mov	IntCS,ax
				
 0208  1F				pop	ds
 0209  5F				pop	di
 020A  5E				pop	si
				
 020B				resize_ds:
 020B  4E				dec	si
				
				;	!!! resize the DS here, based on SI-1 as the limit of what
				;	we need.  If we didn't find a mouse, then resize to the start
				;	of device_int-1.
				
 020C  B8 0001				mov	ax,1			;Successful initialization
				
				cEnd
 020F  5F                    3		pop	di 
 0210  5E                    3		pop	si 
 0211  8D 66 FE              1		lea	sp,-2[bp] 
 0214  1F                    1		pop	ds 
 0215  5D                    1		pop	bp 
 0216  4D                    1		dec	bp 
 0217  CB                    1		ret	0 
 0218                        1	Initialize endp 
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Page     1-24


				page
				
				sEnd	Code
 0218                        1	_TEXT ends 
				end	Initialize

Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Symbols-1


Macros:

		N a m e			Lines

EnterCrit  . . . . . . . . . . .  	   2
LeaveCrit  . . . . . . . . . . .  	  16
POPFF  . . . . . . . . . . . . .  	   5
display_int_size . . . . . . . .  	   3
io_delay . . . . . . . . . . . .  	   3

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

CURSORINFO . . . . . . . . . . .  	0004	0002
  dpXRate  . . . . . . . . . . .  	0000
  dpYRate  . . . . . . . . . . .  	0002
KBINFO . . . . . . . . . . . . .  	0006	0002
  kbRanges . . . . . . . . . . .  	0000
  kbStateSize  . . . . . . . . .  	0004
MOUSEINFO  . . . . . . . . . . .  	000E	0008
  msExists . . . . . . . . . . .  	0000
  msRelative . . . . . . . . . .  	0001
  msNumButtons . . . . . . . . .  	0002
  msRate . . . . . . . . . . . .  	0004
  msXThresh  . . . . . . . . . .  	0006
  msYThresh  . . . . . . . . . .  	0008
  msXRes . . . . . . . . . . . .  	000A
  msYRes . . . . . . . . . . . .  	000C
TIMERINFO  . . . . . . . . . . .  	0004	0001
  tiResolution . . . . . . . . .  	0000
cursorShape  . . . . . . . . . .  	000C	0006
  csHotX . . . . . . . . . . . .  	0000
  csHotY . . . . . . . . . . . .  	0002
  csWidth  . . . . . . . . . . .  	0004
  csHeight . . . . . . . . . . .  	0006
  csWidthBytes . . . . . . . . .  	0008
  csColor  . . . . . . . . . . .  	000A

Segments and Groups:

                N a m e         	Length	 Align	Combine Class

BIOSDataSeg  . . . . . . . . . .  	006D	AT	0040	
DGROUP . . . . . . . . . . . . .  	GROUP
  _DATA  . . . . . . . . . . . .  	00EA	WORD	PUBLIC	'DATA'
_TEXT  . . . . . . . . . . . . .  	0218	WORD	PUBLIC	'CODE'
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Symbols-2


Symbols:            

                N a m e         	Type	 Value	 Attr

ACK_PORT . . . . . . . . . . . .  	NUMBER	0020	
ACK_SLAVE_PORT . . . . . . . . .  	NUMBER	00A0	
AllocDStoCSAlias . . . . . . . .  	L FAR 	0000		External

BASH_INT_PROC  . . . . . . . . .  	NUMBER	000C	
BogusFarRetProc  . . . . . . . .  	F PROC	01E7	_TEXT	Length = 0001
bios_proc  . . . . . . . . . . .  	L DWORD	000C	_DATA	Global
bios_time  . . . . . . . . . . .  	L BYTE	006C	BIOSDataSeg
bptr . . . . . . . . . . . . . .  	TEXT  byte ptr		

CALL_ON_ANY_INT  . . . . . . . .  	NUMBER	001F	
CLEAR_COUNTERS . . . . . . . . .  	NUMBER	000B	
CodeBASE . . . . . . . . . . . .  	ALIAS	 _TEXT		
CodeOFFSET . . . . . . . . . . .  	TEXT  offset _TEXT:		
copy_mouse_routines  . . . . . .  	L NEAR	01E8	_TEXT

DataBASE . . . . . . . . . . . .  	ALIAS	 DGROUP		
DataOFFSET . . . . . . . . . . .  	TEXT  offset DGROUP:		
Disable  . . . . . . . . . . . .  	F PROC	006C	_TEXT	Global	Length = 0025
device_int . . . . . . . . . . .  	N PROC	0018	_DATA	Global	Length = 00D2
disable_done . . . . . . . . . .  	L NEAR	0088	_TEXT
disable_proc . . . . . . . . . .  	L WORD	0012	_DATA	Global
dosbox_ig_read_data  . . . . . .  	F PROC	0132	_TEXT	Global	Length = 000D
dosbox_ig_read_regsel  . . . . .  	F PROC	013F	_TEXT	Global	Length = 000D
dosbox_ig_write_data . . . . . .  	F PROC	014C	_TEXT	Global	Length = 000D
dosbox_ig_write_regsel . . . . .  	F PROC	0159	_TEXT	Global	Length = 000D
dptr . . . . . . . . . . . . . .  	TEXT  dword ptr		

EOI  . . . . . . . . . . . . . .  	NUMBER	0020	
Enable . . . . . . . . . . . . .  	F PROC	0035	_TEXT	Global	Length = 0037
enable_done  . . . . . . . . . .  	L NEAR	0061	_TEXT
enable_our_int . . . . . . . . .  	N PROC	00E7	_TEXT	Global	Length = 000D
enable_proc  . . . . . . . . . .  	L WORD	0010	_DATA	Global
event_proc . . . . . . . . . . .  	L DWORD	0008	_DATA	Global

fail . . . . . . . . . . . . . .  	L NEAR	01A0	_TEXT

got_mouse  . . . . . . . . . . .  	L NEAR	01AA	_TEXT

hook_us_in . . . . . . . . . . .  	N PROC	00AC	_TEXT	Global	Length = 003B
hook_us_in_no_irq  . . . . . . .  	L NEAR	00C5	_TEXT

INT33H_BUS . . . . . . . . . . .  	NUMBER	0001	
INT33H_ENABLE  . . . . . . . . .  	NUMBER	0020	
INT33H_GETINFO . . . . . . . . .  	NUMBER	0024	
INT33H_HP  . . . . . . . . . . .  	NUMBER	0005	
INT33H_INPORT  . . . . . . . . .  	NUMBER	0003	
INT33H_PS_2  . . . . . . . . . .  	NUMBER	0004	
INT33H_RESET . . . . . . . . . .  	NUMBER	0000	
INT33H_SERIAL  . . . . . . . . .  	NUMBER	0002	
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Symbols-3


INT_REQUEST  . . . . . . . . . .  	NUMBER	000A	
IN_SERVICE . . . . . . . . . . .  	NUMBER	000B	
Initialize . . . . . . . . . . .  	F PROC	0166	_TEXT	Global	Length = 00B2
Inquire  . . . . . . . . . . . .  	F PROC	0000	_TEXT	Global	Length = 0035
IntCS  . . . . . . . . . . . . .  	L WORD	0016	_DATA	Global
interrupt_rate . . . . . . . . .  	L WORD	0014	_DATA	Global

lp_mouse_info  . . . . . . . . .  	TEXT  (dword ptr [bp+6])		

MASK_PORT  . . . . . . . . . . .  	NUMBER	0021	
MASK_SLAVE_PORT  . . . . . . . .  	NUMBER	00A1	
MAX_INT_SIZE . . . . . . . . . .  	NUMBER	00D2	
MF_ENABLED . . . . . . . . . . .  	NUMBER	0001	
MF_MOUSE_EXISTS  . . . . . . . .  	NUMBER	0080	
MF_ON_SLAVEPIC . . . . . . . . .  	NUMBER	0040	
MOUSE_SYS_VEC  . . . . . . . . .  	NUMBER	0033	
MT_BUS . . . . . . . . . . . . .  	NUMBER	0001	
MT_HP  . . . . . . . . . . . . .  	NUMBER	0005	
MT_INPORT  . . . . . . . . . . .  	NUMBER	0003	
MT_NO_MOUSE  . . . . . . . . . .  	NUMBER	0000	
MT_PS2 . . . . . . . . . . . . .  	NUMBER	0004	
MT_SERIAL  . . . . . . . . . . .  	NUMBER	0002	
MouseGetIntVect  . . . . . . . .  	F PROC	0097	_TEXT	Global	Length = 0015
mask_8259  . . . . . . . . . . .  	L BYTE	0003	_DATA	Global
mouse_flags  . . . . . . . . . .  	L BYTE	0005	_DATA	Global
mouse_type . . . . . . . . . . .  	L BYTE	0006	_DATA	Global

NUMBER_BUTTONS . . . . . . . . .  	NUMBER	0002	
new_event_proc . . . . . . . . .  	TEXT  (dword ptr [bp+6])		

off_bios_proc  . . . . . . . . .  	ALIAS	 bios_proc		
off_event_proc . . . . . . . . .  	ALIAS	 event_proc		
off_lp_mouse_info  . . . . . . .  	TEXT  (word ptr [bp+6])		
off_new_event_proc . . . . . . .  	TEXT  (word ptr [bp+6])		
old_8259_mask  . . . . . . . . .  	L BYTE	0004	_DATA	Global

ps2_search . . . . . . . . . . .  	L NEAR	0000		External

resize_ds  . . . . . . . . . . .  	L NEAR	020B	_TEXT
rs232_data . . . . . . . . . . .  	L WORD	0000	BIOSDataSeg	Length = 0004

SF_ABSOLUTE  . . . . . . . . . .  	NUMBER	8000	
SF_B1_DOWN . . . . . . . . . . .  	NUMBER	0002	
SF_B1_UP . . . . . . . . . . . .  	NUMBER	0004	
SF_B2_DOWN . . . . . . . . . . .  	NUMBER	0008	
SF_B2_UP . . . . . . . . . . . .  	NUMBER	0010	
SF_MOVEMENT  . . . . . . . . . .  	NUMBER	0001	
SWAP_INT_PROC  . . . . . . . . .  	NUMBER	0014	
seg_bios_proc  . . . . . . . . .  	DWORD	000E	_DATA
seg_event_proc . . . . . . . . .  	DWORD	000A	_DATA
seg_lp_mouse_info  . . . . . . .  	TEXT  (word ptr [bp+8])		
seg_new_event_proc . . . . . . .  	TEXT  (word ptr [bp+8])		

unhook_exit  . . . . . . . . . .  	L NEAR	0131	_TEXT
Microsoft (R) Macro Assembler Version 5.10A                 1/9/17 16:18:32

Mouse - Main Mouse Module                                   Symbols-4


unhook_no_bios_proc  . . . . . .  	L NEAR	0119	_TEXT
unhook_no_irq  . . . . . . . . .  	L NEAR	0105	_TEXT
unhook_us  . . . . . . . . . . .  	N PROC	00F4	_TEXT	Global	Length = 003E

VMD_DEVICE_ID  . . . . . . . . .  	NUMBER	000C	
vector . . . . . . . . . . . . .  	L BYTE	0002	_DATA	Global
vmd_call_done  . . . . . . . . .  	L NEAR	01E8	_TEXT

WEP  . . . . . . . . . . . . . .  	F PROC	0091	_TEXT	Global	Length = 0006
WF_PMODE . . . . . . . . . . . .  	NUMBER	0001	
WinFlags . . . . . . . . . . . .  	L WORD	0000	_DATA	Global
wptr . . . . . . . . . . . . . .  	TEXT  word ptr		

X_SPEED  . . . . . . . . . . . .  	NUMBER	0002	

Y_SPEED  . . . . . . . . . . . .  	NUMBER	0002	

?386regs . . . . . . . . . . . .  	NUMBER	0000	
@Cpu . . . . . . . . . . . . . .  	TEXT  1415		
@FileName  . . . . . . . . . . .  	TEXT  mouse		
@Version . . . . . . . . . . . .  	TEXT  510		
__ROMBIOS  . . . . . . . . . . .  	NUMBER	0000		Communal
__WINFLAGS . . . . . . . . . . .  	NUMBER	0000		Communal


   2518 Source  Lines
   9121 Total   Lines
    353 Symbols

  45702 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
