This is an attempt to re-implement the Windows 3.1
mouse driver from scratch using NASM and Open Watcom.

I do not approve of the bizarre techniques used by
Microsoft in their SDK mouse sample source code.
The NE executable format allows segments and attributes
for each, I think there are better ways of defining
interrupts than hacking your data segment to be
fixed and copying your interrupt handler and state
into an alias like that.

Note that because of stringent arrangement requirements
for Windows drivers, other library code is duplicated
here.

What Microsoft did wrong (or, the unnecessary methods
used in their DDK sample driver):

- Create an alias of the data segment for code
- Copy the interrupt routine into the data segment
- Point at it
- Write all code to access relative to the copy
- Declare all data shared, FIXED, all code DISCARDABLE
- Messes with enabling/disabling the PIC interrupt for
  PS/2 mice.
- Hooks *two* interrupts for handling PS/2 mice. It
  both hooks IRQ 12 (why?) AND it collects mouse
  movement from the INT 15h callback function.
  The INT 15h hook does nothing but collect X/Y motion
  and status from the BIOS. It leaves the actual callback
  to Windows to happen from the IRQ 12 interrupt.
  Completely unnecessary.

What this code does right:

- Declares two sets of CODE and DATA segments. One is
  discardable (most of the init, enable, disable, and
  inquiry functions), the other set is FIXED NOMOVEABLE
  (interrupt code and functions used by the interrupt
  handler). The FIXED section of the driver is very
  small.
- Uses ONLY the PS/2 INT 15h interface.
- Does not mess with PIC masking at all (doesn't need to).
- Does not hook interrupts at all. No need to mess with
  IRQ 12.

Other notes:
- The Microsoft reference driver has PS/2 mouse interrupt
  issues with the "DOS box" in Windows. Eventually (at
  least in DOSBox-X) interrupts stop firing. This
  rewrite appears to have none of those issues.
- This rewrite came out about 200 bytes smaller than
  the reference driver! Despite the fact that Microsoft's
  version is pure ASM and this version almost 100%
  written in C!
- This code does reveal a bit of a flaw in Open Watcom C,
  which is that the interrupt handler asm generated by
  the compiler likes to load the ES segment register
  for _NDDATA references instead of just using DS.

