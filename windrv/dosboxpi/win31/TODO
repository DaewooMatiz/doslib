
- Clean up this code, it's a mess.

- Figure out why linking MASM's OBJ output with Open Watcom's
  WLINK utility results in a driver that generally works OK
  but causes crashes in Windows the minute you move the mouse
  cursor.

  Until you figure that out, you're going to have to use
  Microsoft's linker to compile this driver.

  It may have something to do with the part that allocates
  a CS to DS alias of it's code segment and copies the
  interrupt handler, and the interrupt handler's insistence
  on appearing first in the data segment. Yuck. Is there
  any way to do interrupt handlers in Windows without doing
  that?

- when converting to use Open Watcom, remember that Watcom's
  linker doesn't use .DEF files and that you have to provide
  all exports and parameters to the linker directly. When
  you declare how segments are defined, you can generally
  copy-paste from the original .DEF but you need to change
  "SINGLE" to "SHARED" to indicate the data segment is one
  copy shared across processes. Watcom's linker doesn't
  understand the "SINGLE" specification that Microsoft's
  linker does.

  Make sure that, despite naming the file DBOXMPI.DRV, the
  resident module name (the one you call GetModuleHandle
  with to obtain the module) must be "MOUSE". Windows will
  not talk to the mouse driver unless the module name is
  "MOUSE"

  You will need to copy-paste the windows_dll format spec
  from Watcom linker's wlink.lnk in order to use all normal
  parameters but remove the line that includes the C runtime
  startup code. Make sure it includes "library windows"
  to use WINDOWS.LIB so that the ASM code can resolve the
  AllocDSToCSAlias function in KERNEL.

- Convert the driver, subroutine by subroutine, to assemble
  with NASM or YASM instead of MASM. When the conversion is
  complete, MASM will no longer be needed to assemble this
  driver.

- Have the driver enable DOSBox-X mouse pointer notification
  in the Enable function and disable DOSBox-X notification
  in the Disable function. Currently, it only enables
  notification from the driver initialization and leaves it
  on. It stays on even after Windows exits. It would be
  better if DOSBox-X reverted to the "click to capture"
  behavior when the driver is shutdown.

- Figure out what Windows 3.0 doesn't like about this driver,
  and fix it. If that requires a win30 copy of this code,
  then so be it. The best solution would be to find the
  Windows 3.0 DDK, but the more likely solution would be to
  disassemble the Windows 3.0 MOUSE.DRV file and see what
  it's doing compared to Windows 3.1.

