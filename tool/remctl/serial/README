Remote debugging tool, for MS-DOS, via null modem RS-232 cable.

The client is the Windows/Linux program talking to the DOS system.

The server is the utility or TSR running on the DOS system.

The client is written to talk with the server either through a
RS-232 null modem cable or through a localhost telnet connection
opened by a running DOSBox instance (serial1=nullmodem).

NOTE: You need to specify "serial1=nullmodem transparent:1" in dosbox.conf
      to disable handshaking.

To use with a null-modem cable, install the REMSVR.EXE program (preferably
the dos86s version) on the target DOS machine, connect the null-modem cable
to the primary serial port (ideally, COM1), and then connect the other end
to your Linux / Windows system.

If your Linux system has serial ports on the motherboard, they
will appear in Linux's /dev directory as /dev/ttyS0, /dev/ttyS1, etc.
If you are using a USB to serial adapter, then the USB-serial adapter
will show up in /dev as /dev/ttyUSB0, /dev/ttyUSB1, etc.

In Windows, the serial ports (motherboard and USB) appear as UNC paths
like \\.\COM1. If using cygwin or mingw on Windows, you will need to
escape the backslashes like this: "\\\\.\\COM1" to specify the UNC
path properly.

CAUTION: This program uses some internal state of MS-DOS to listen to
         the serial port and enable background filesystem I/O. Due to
         the non-reentrant nature of MS-DOS, filesystem corruption
         or system instability may occur in extreme cases where this
         program is not able to handle background I/O vs MS-DOS
         reentrancy. The theoretical risk increases with the use of
         disk caching and disk compression drivers. It is recommended
         not to use this program on any system where filesystem or
         system corruption would be damaging, use only on systems
         that are "disposable" i.e. the DOS system can be reloaded in
         the event that such corruption occurs.

         Use at your own risk.

The following is a list of potential problems that can arise from the
misuse of this program. Please pay attention.

** Background file I/O permits one handle at a time

Due to the one-to-one nature of this program the REMSRV.EXE program
only allows one open file at a time.

When opened, the file is held open until closed explicitly, or until
implicitly closed by a request to open or create another file.

** Why does DOS list the file that is uploading now, as zero bytes?

When writing a file to extend it, MS-DOS will allocate clusters to
grow the file but will not update the file's directory entry until
the file is closed. The file's content length will appear correctly
once the file is closed on the server side.

** What happens to the file if the upload is interrupted?

If you issue a command to upload, then the upload gets interrupted,
the file will remain open in the background since nobody has yet
instructed the server to close the file.

If the upload is interrupted in this manner, you should run the
remctlclient program with -c close to close the file handle.

** What happens if the system is reset without closing the file?

For the same reason that the file appears zero length while writing,
resetting the system while a file upload is in progress will result
in a file listed as zero bytes, even though there is an allocation
chain for the file.

If the system is reset while uploading, make sure to run CHKDSK.EXE
or Microsoft Scandisk to reclaim the lost allocation chain and fix
up the filesystem.

** When is REMSRV.EXE able to read extended memory?

To read extended memory, the CPU must be a 386 or higher and must
NOT be running in virtual 8086 mode. If virtual 8086 mode is running,
the program must use special EMM386 API calls to switch modes.
Given the program runs from an interrupt handler, it is probably
not a good idea to call EMM386.EXE from an interrupt handler.

Extended memory on a 286 is not supported, because that requires the
use of the "reset vector" i.e. resetting the CPU then hoping that
the BIOS returns control to our code. That is also not wise to do
from an interrupt handler.

If REMSRV.EXE cannot provide extended memory, it will return with
all bytes set to a single ASCII char (usually 'V' to indicate
virtual 8086 mode).

Note that the program will be able to read the HMA without using
flat real mode (the 64KB region just past the 1MB boundary).

Extended memory access may be further limited by the state of the
A20 gate.

