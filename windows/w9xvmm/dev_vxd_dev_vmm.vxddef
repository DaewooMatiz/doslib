%header

VXDDEVNAME      VMM
DeviceID        0x0001
MinWinVer       3.0
description     Windows Virtual Machine Manager
description
description     This is "built in" to the kernel and is a core device of the Windows system.
description
description     File location (Windows 3.0/3.1): C:\WINDOWS\SYSTEM\WIN386.EXE
description     File location (Windows 95/98/ME): C:\WINDOWS\SYSTEM\VMM32.VXD
description
description     Note that in both cases, the VMM does not exist as a standalone VxD device
description     but as code "built in" to the Windows kernel. VMM32.VXD and WIN386.EXE are
description     executables containing the kernel and a packed structure containing the
description     VxD device drivers in a "pre-digested" form. The VxD drivers contained within
description     do not contain the MS-DOS header, but start with the LE header. The LE header
description     is modified slightly to change one of the fields to instead indicate resident
description     length. This packed structure is known as 'W3' and 'W4', referring to the
description     extended header pointed to by the MS-DOS header. The 'W3' header is merely
description     a list of the VxDs and where they exist elsewhere in the same EXE
description     (Windows 3.0/3.1). The 'W4' header is the same format, but with compression
description     applied to any part of the EXE past the W4 header to compress both the list
description     and the VxDs contained elsewhere (Windows 95/98/ME). These built-in VxDs
description     provide both core devices as well as the "base drivers" that allow Windows
description     to function in the absence of external VxD drivers. Such drivers can be
description     referenced in SYSTEM.INI as "device=*vxdname" rather than "device=VXDFILE.VXD".
description
description     For more information on the W3 and W4 formats, see DOSLIB tools:
description     - tool/w3list.pl (show contents of W3 header)
description     - tool/w3extract.pl (extract devices from W3 pack)
description     - tool/w4tow3/w4tow3.c (decompress/convert W4 to W3 format)
description
description     References:
description
description     * Windows 3.1 DDK (CD-ROM drive D) D:\386\INCLUDE\VMM.INC
description     - "VMM.INC - Include file for Virtual Machine Manager"
description     - "Version 1.00 - 05-May-1988 - By RAL"
description
description     * Windows 95 DDK (installed in C:\DDK95) C:\DDK95\INC32\VMM.INC
description     - (C) 1993-1995 Microsoft
description
description     * Windows Undocumented File Formats - Working Inside 16- and 32-bit Windows
description     - Pete Davis and Mike Wallace
description     - R&D Books (C) 1997
description
description     This DOSLIB header file (C) 2016-2017 Jonathan Campbell

%endheader

#--------------------------------------
%defcall
byname          Get_VMM_Version
description     Return VMM version

# no inputs

out             AX      version                                 ; AH=Major AL=Minor (example: 0x030A = 3.10)
out             ECX     Debug                                   ; debug development revision number
%enddef

#--------------------------------------
%defcall
byname          Get_Cur_VM_Handle
description     Return current VM handle
async           yes

# no inputs

out             EBX=vxd_vm_handle_t     .                       ; Handle of the current VM

return          Current VM handle
%enddef

#--------------------------------------
%defcall
byname          Test_Cur_VM_Handle
description     Test whether VM handle is current VM
async           yes

in              EBX=vxd_vm_handle_t     VM                      ; VM handle to test

out             ZF                      .                       ; ZF set if vm handle matches

return          Boolean value. True if VM handle matches, false if not.
%enddef

#--------------------------------------
%defcall
byname          Get_Sys_VM_Handle
description     Return system VM handle
async           yes

# no inputs

out             EBX=vxd_vm_handle_t     .                       ; Handle of the system VM

return          System VM handle
%enddef

#--------------------------------------
%defcall
byname          Test_Sys_VM_Handle
description     Test whether VM handle is system VM
async           yes

in              EBX=vxd_vm_handle_t     VM                      ; VM handle to test

out             ZF                      .                       ; ZF set if vm handle matches

return          Boolean value. True if VM handle matches the one given, false if not.
%enddef

#--------------------------------------
%defcall
byname          Validate_VM_Handle
description     Verify that the VM handle is valid
async           yes

in              EBX=vxd_vm_handle_t     VM                      ; VM handle to test

out             !CF                     .                       ; CF is set if NOT valid, clear if valid. Return value should invert sense.

return          Boolean value. True if VM handle is valid, false if invalid.
%enddef

#--------------------------------------
%defcall
byname          Get_VMM_Reenter_Count
description     Return the number of times the VMM has been reentered. If nonzero, use only asynchronous calls.

# no inputs

out             ECX     .                                       ; number of times VMM has been reentered
%enddef

#--------------------------------------
%defcall
byname          Begin_Reentrant_Execution
description     Start reentrant execution. You can use this when hooking VMM faults (reentrant processor faults)
description     in order to call non-asynchronous VMM or virtual device services or execute a virtual machine.
description     Do not use this service to avoid scheduling events on hardware interrupts.

# no inputs

out             ECX     .                                       ; old reentrancy count

return          unsigned int containing old reentrancy count, which must be saved and given to End_Reentrancy_Execution later on.
%enddef

#--------------------------------------
%defcall
byname          End_Reentrant_Execution
description     Ends reentrant execution, after Begin_Reentrant_Execution.

in              ECX     Count                                   ; reentrancy count returned by Begin_Reentrant_Execution
%enddef

#--------------------------------------
%defcall
byname          Install_V86_Break_Point
description     Insert a break point in virtual 8086 memory of the current virtual machine, and
description     insert a breakpoint callback procedure to receive control when the break point happens.

in              EAX=void*const          BreakAddr               ; V86 address to place the break point
in              EDX=void*const          RefData                 ; pointer to reference data to be passed to callback procedure
in              ESI=void*const          Callback                ; pointer to callback procedure to install (32-bit offset)

out             !CF                     .                       ; success (CF clear) or failure (CF set)

return          Bool, true if success, false if failure (not installed)
%enddef

#--------------------------------------
%defcall
byname          Remove_V86_Break_Point
description     Remove a virtual 8086 break point installed with Install_V86_Break_Point in the current VM

in              EAX=void*const          BreakAddr               ; V86 address to remove break point from
%enddef

#--------------------------------------
%defcall
byname          Allocate_V86_Call_Back
description     Install a callback procedure for virtual 8086 mode applications can call to execute code in
description     a virtual device.

in              EDX=void*const          RefData                 ; points to reference data to pass to callback procedure
in              ESI=void*const          Callback                ; points to callback procedure to call

out             CF                      error                   ; if success, CF=0 and EAX=realmode ptr. if failure, CF=1
out             EAX                     CallbackAddr            ; if CF=0, segment:offset of real-mode callback address
%enddef

#--------------------------------------
%defcall
byname          Allocate_PM_Call_Back
description     Install a callback procedure for protected mode applications to call to execute code in a virtual device.

in              EDX=void*const          RefData                 ; points to reference data to pass to callback procedure
in              ESI=void*const          Callback                ; points to callback procedure to call

out             CF                      error                   ; if success, CF=0 and EAX=realmode ptr. if failure, CF=1
out             EAX                     CallbackAddr            ; if CF=0, address of callback procedure
%enddef

#--------------------------------------
%defcall
byname          Call_When_VM_Returns
description     Install a callback procedure to receive control when a virtual machine executes the IRET instruction for
description     the current interrupt.
description
description     if TimeOut is positive, callback is called if VM does not execute IRET within the timeout period.
description     if TimeOut is negative, callabck is called when timeout occurs and again when IRET is executed by the VM.
description     if TimeOut is zero, timeout is ignored.

in              EAX=int32_t             TimeOut                 ; number of milliseconds for timeout. see description for details.
in              EDX=void*const          RefData                 ; pointer to reference data to pass to callback
in              ESI=void*const          Callback                ; callback procedure (32-bit flat)
%enddef

#--------------------------------------
%defcall
byname          Schedule_Global_Event
description     Schedule a global event, which does not require a specific virtual machine to process it.
description     The system does not switch tasks before calling the procedure.
description
description     The callback can carry out any actions and use any VMM services. It is called like this:
description
description     mov ebx,VM ; current VM handle
description     mov edx,RefData ; reference data pointer
description     mov ebp,crs ; pointer to a Client_Reg_Struc
description     call [EventCallback]
description
description     You can cancel a scheduled event using Cancel_Global_Event
async           yes

in              ESI=void*const          EventCallback           ; pointer to callback procedure (32-bit flat)
in              EDX=void*const          RefData                 ; pointer to reference data to pass to callback

out             ESI                     .                       ; event handle
%enddef

#--------------------------------------
%defcall
byname          Schedule_VM_Event
description     Schedule an event for the specified virtual machine. The system will carry out a task switch
description     to the virtual machine before calling the event callback procedure.
description
description     You can cancel a scheduled event using Cancel_VM_Event
async           yes

in              EBX=vxd_vm_handle_t     VM                      ; VM handle to schedule event
in              ESI=void*const          EventCallback           ; pointer to callback procedure (32-bit flat)
in              EDX=void*const          RefData                 ; pointer to reference data to pass to callback

out             ESI                     .                       ; event handle
%enddef

#--------------------------------------
%defcall
byname          Call_Global_Event
description     Call the event callback procedure immediately, or schedule a global event if the virtual device
description     is processing a hardware interrupt that interrupted the VMM.
description
description     You can cancel the event (if scheduled) using Cancel_Global_Event.
async           yes

in              ESI=void*const          EventCallback           ; pointer to callback procedure (32-bit flat)
in              EDX=void*const          RefData                 ; pointer to reference data to pass to callback

out             ESI                     .                       ; event handle, or 0 if procedure was called immediately without scheduling.
%enddef

#--------------------------------------
%defcall
byname          Call_VM_Event
description     Call the event callback procedure immediately, or schedule a VM event if the virtual device
description     is processing a hardware interrupt that interrupted the VMM.
description
description     You can cancel the event (if scheduled) using Cancel_VM_Event.
async           yes

in              EBX=vxd_vm_handle_t     VM                      ; VM handle
in              ESI=void*const          EventCallback           ; pointer to callback procedure (32-bit flat)
in              EDX=void*const          RefData                 ; pointer to reference data to pass to callback

out             ESI                     .                       ; event handle, or 0 if procedure was called immediately without scheduling.
%enddef

