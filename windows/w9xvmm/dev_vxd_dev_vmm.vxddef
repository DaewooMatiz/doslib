%header

VXDDEVNAME      VMM
DeviceID        0x0001
MinWinVer       3.0
description     Windows Virtual Machine Manager
description
description     This is "built in" to the kernel and is a core device of the Windows system.
description
description     File location (Windows 3.0/3.1): C:\WINDOWS\SYSTEM\WIN386.EXE
description     File location (Windows 95/98/ME): C:\WINDOWS\SYSTEM\VMM32.VXD
description
description     Note that in both cases, the VMM does not exist as a standalone VxD device
description     but as code "built in" to the Windows kernel. VMM32.VXD and WIN386.EXE are
description     executables containing the kernel and a packed structure containing the
description     VxD device drivers in a "pre-digested" form. The VxD drivers contained within
description     do not contain the MS-DOS header, but start with the LE header. The LE header
description     is modified slightly to change one of the fields to instead indicate resident
description     length. This packed structure is known as 'W3' and 'W4', referring to the
description     extended header pointed to by the MS-DOS header. The 'W3' header is merely
description     a list of the VxDs and where they exist elsewhere in the same EXE
description     (Windows 3.0/3.1). The 'W4' header is the same format, but with compression
description     applied to any part of the EXE past the W4 header to compress both the list
description     and the VxDs contained elsewhere (Windows 95/98/ME). These built-in VxDs
description     provide both core devices as well as the "base drivers" that allow Windows
description     to function in the absence of external VxD drivers. Such drivers can be
description     referenced in SYSTEM.INI as "device=*vxdname" rather than "device=VXDFILE.VXD".
description
description     For more information on the W3 and W4 formats, see DOSLIB tools:
description     - tool/w3list.pl (show contents of W3 header)
description     - tool/w3extract.pl (extract devices from W3 pack)
description     - tool/w4tow3/w4tow3.c (decompress/convert W4 to W3 format)
description
description     References:
description
description     * Windows 3.1 DDK (CD-ROM drive D) D:\386\INCLUDE\VMM.INC
description     - "VMM.INC - Include file for Virtual Machine Manager"
description     - "Version 1.00 - 05-May-1988 - By RAL"
description
description     * Windows 95 DDK (installed in C:\DDK95) C:\DDK95\INC32\VMM.INC
description     - (C) 1993-1995 Microsoft
description
description     * Windows Undocumented File Formats - Working Inside 16- and 32-bit Windows
description     - Pete Davis and Mike Wallace
description     - R&D Books (C) 1997
description
description     This DOSLIB header file (C) 2016-2017 Jonathan Campbell

%endheader

#--------------------------------------
%defconstbitfield
description     Scheduler boost values (*_Boost)
description
description     Source: Windows 3.1 DDK, D:\386\INCLUDE\VMM.INC, line 1524 SCHEDULER BOOST VALUES binary EQUates

#                                               default=1   default=(1<<width)-1
#       constant                    bit number  bit width   value   comment
def     Reserved_Low_Boost          0                             ; Reserved for use by the system
def     Cur_Run_VM_Boost            2                             ; Used by time-slice scheduler to force a VM to run for it's allotted time-slice
def     Low_Pri_Device_Boost        4                             ; For events that need timely processing, but are not time critical
def     High_Pri_Device_Boost       12                            ; For events that need timely processing, but should not circumvent operations that have a critical section boost
def     Critical_Section_Boost      20                            ; Used by the system for virtual machines specified in a call to Begin_Critical_Section
def     Time_Critical_Boost         22                            ; For events that MUST be processed even with another VM is in a critical section (example: VPICD when simulating hardware interrupts)
def     Reserved_High_Boost         30                            ; Reserved for use by the system
%enddef

#--------------------------------------
%defcall
byname          Get_VMM_Version
description     Return VMM version

# no inputs

out             AX      version                                 ; AH=Major AL=Minor (example: 0x030A = 3.10)
out             ECX     Debug                                   ; debug development revision number
%enddef

#--------------------------------------
%defcall
byname          Get_Cur_VM_Handle
description     Return current VM handle
async           yes

# no inputs

out             EBX=vxd_vm_handle_t     .                       ; Handle of the current VM

return          Current VM handle
%enddef

#--------------------------------------
%defcall
byname          Test_Cur_VM_Handle
description     Test whether VM handle is current VM
async           yes

in              EBX=vxd_vm_handle_t     VM                      ; VM handle to test

out             ZF                      .                       ; ZF set if vm handle matches

return          Boolean value. True if VM handle matches, false if not.
%enddef

#--------------------------------------
%defcall
byname          Get_Sys_VM_Handle
description     Return system VM handle
async           yes

# no inputs

out             EBX=vxd_vm_handle_t     .                       ; Handle of the system VM

return          System VM handle
%enddef

#--------------------------------------
%defcall
byname          Test_Sys_VM_Handle
description     Test whether VM handle is system VM
async           yes

in              EBX=vxd_vm_handle_t     VM                      ; VM handle to test

out             ZF                      .                       ; ZF set if vm handle matches

return          Boolean value. True if VM handle matches the one given, false if not.
%enddef

#--------------------------------------
%defcall
byname          Validate_VM_Handle
description     Verify that the VM handle is valid
async           yes

in              EBX=vxd_vm_handle_t     VM                      ; VM handle to test

out             !CF                     .                       ; CF is set if NOT valid, clear if valid. Return value should invert sense.

return          Boolean value. True if VM handle is valid, false if invalid.
%enddef

#--------------------------------------
%defcall
byname          Get_VMM_Reenter_Count
description     Return the number of times the VMM has been reentered. If nonzero, use only asynchronous calls.

# no inputs

out             ECX     .                                       ; number of times VMM has been reentered
%enddef

#--------------------------------------
%defcall
byname          Begin_Reentrant_Execution
description     Start reentrant execution. You can use this when hooking VMM faults (reentrant processor faults)
description     in order to call non-asynchronous VMM or virtual device services or execute a virtual machine.
description     Do not use this service to avoid scheduling events on hardware interrupts.

# no inputs

out             ECX     .                                       ; old reentrancy count

return          unsigned int containing old reentrancy count, which must be saved and given to End_Reentrancy_Execution later on.
%enddef

#--------------------------------------
%defcall
byname          End_Reentrant_Execution
description     Ends reentrant execution, after Begin_Reentrant_Execution.

in              ECX     Count                                   ; reentrancy count returned by Begin_Reentrant_Execution
%enddef

#--------------------------------------
%defcall
byname          Install_V86_Break_Point
description     Insert a break point in virtual 8086 memory of the current virtual machine, and
description     insert a breakpoint callback procedure to receive control when the break point happens.

in              EAX=const+void*         BreakAddr               ; V86 address to place the break point
in              EDX=const+void*         RefData                 ; pointer to reference data to be passed to callback procedure
in              ESI=const+void*         Callback                ; pointer to callback procedure to install (32-bit offset)

out             !CF                     .                       ; success (CF clear) or failure (CF set)

return          Bool, true if success, false if failure (not installed)
%enddef

#--------------------------------------
%defcall
byname          Remove_V86_Break_Point
description     Remove a virtual 8086 break point installed with Install_V86_Break_Point in the current VM

in              EAX=const+void*         BreakAddr               ; V86 address to remove break point from
%enddef

#--------------------------------------
%defcall
byname          Allocate_V86_Call_Back
description     Install a callback procedure for virtual 8086 mode applications can call to execute code in
description     a virtual device.

in              EDX=const+void*         RefData                 ; points to reference data to pass to callback procedure
in              ESI=const+void*         Callback                ; points to callback procedure to call

out             CF                      error                   ; if success, CF=0 and EAX=realmode ptr. if failure, CF=1
out             EAX                     CallbackAddr            ; if CF=0, segment:offset of real-mode callback address
%enddef

#--------------------------------------
%defcall
byname          Allocate_PM_Call_Back
description     Install a callback procedure for protected mode applications to call to execute code in a virtual device.

in              EDX=const+void*         RefData                 ; points to reference data to pass to callback procedure
in              ESI=const+void*         Callback                ; points to callback procedure to call

out             CF                      error                   ; if success, CF=0 and EAX=realmode ptr. if failure, CF=1
out             EAX                     CallbackAddr            ; if CF=0, address of callback procedure
%enddef

#--------------------------------------
%defcall
byname          Call_When_VM_Returns
description     Install a callback procedure to receive control when a virtual machine executes the IRET instruction for
description     the current interrupt.
description
description     if TimeOut is positive, callback is called if VM does not execute IRET within the timeout period.
description     if TimeOut is negative, callabck is called when timeout occurs and again when IRET is executed by the VM.
description     if TimeOut is zero, timeout is ignored.

in              EAX=int32_t             TimeOut                 ; number of milliseconds for timeout. see description for details.
in              EDX=const+void*         RefData                 ; pointer to reference data to pass to callback
in              ESI=const+void*         Callback                ; callback procedure (32-bit flat)
%enddef

#--------------------------------------
%defcall
byname          Schedule_Global_Event
description     Schedule a global event, which does not require a specific virtual machine to process it.
description     The system does not switch tasks before calling the procedure.
description
description     The callback can carry out any actions and use any VMM services. It is called like this:
description
description     mov ebx,VM ; current VM handle
description     mov edx,RefData ; reference data pointer
description     mov ebp,crs ; pointer to a Client_Reg_Struc
description     call [EventCallback]
description
description     You can cancel a scheduled event using Cancel_Global_Event
async           yes

in              ESI=const+void*                     EventCallback           ; pointer to callback procedure (32-bit flat)
in              EDX=const+void*                     RefData                 ; pointer to reference data to pass to callback

out             ESI=vxd_global_event_handle_t       .                       ; event handle
%enddef

#--------------------------------------
%defcall
byname          Schedule_VM_Event
description     Schedule an event for the specified virtual machine. The system will carry out a task switch
description     to the virtual machine before calling the event callback procedure.
description
description     You can cancel a scheduled event using Cancel_VM_Event
async           yes

in              EBX=vxd_vm_handle_t                 VM                      ; VM handle to schedule event
in              ESI=const+void*                     EventCallback           ; pointer to callback procedure (32-bit flat)
in              EDX=const+void*                     RefData                 ; pointer to reference data to pass to callback

out             ESI=vxd_vm_event_handle_t           .                       ; event handle
%enddef

#--------------------------------------
%defcall
byname          Call_Global_Event
description     Call the event callback procedure immediately, or schedule a global event if the virtual device
description     is processing a hardware interrupt that interrupted the VMM.
description
description     You can cancel the event (if scheduled) using Cancel_Global_Event.
async           yes

in              ESI=const+void*                     EventCallback           ; pointer to callback procedure (32-bit flat)
in              EDX=const+void*                     RefData                 ; pointer to reference data to pass to callback

out             ESI=vxd_global_event_handle_t       .                       ; event handle, or 0 if procedure was called immediately without scheduling.
%enddef

#--------------------------------------
%defcall
byname          Call_VM_Event
description     Call the event callback procedure immediately, or schedule a VM event if the virtual device
description     is processing a hardware interrupt that interrupted the VMM.
description
description     You can cancel the event (if scheduled) using Cancel_VM_Event.
async           yes

in              EBX=vxd_vm_handle_t                 VM                      ; VM handle
in              ESI=const+void*                     EventCallback           ; pointer to callback procedure (32-bit flat)
in              EDX=const+void*                     RefData                 ; pointer to reference data to pass to callback

out             ESI=vxd_vm_event_handle_t           .                       ; event handle, or 0 if procedure was called immediately without scheduling.
%enddef

#--------------------------------------
%defcall
byname          Cancel_Global_Event
description     Cancel a global event previously scheduled by Schedule_Global_Event or Call_Global_Event
description     A virtual device must not attempt to cancel an event where the callback function has already been called.

in              ESI=vxd_global_event_handle_t       Event                   ; Event handle, or 0 if no event should be cancelled.
%enddef

#--------------------------------------
%defcall
byname          Cancel_VM_Event
description     Cancel a VM event previously scheduled by Schedule_VM_Event or Call_VM_Event
description     A virtual device must not attempt to cancel an event where the callback function has already been called.

in              EBX                                 VM                      ; VM handle
in              ESI=vxd_vm_event_handle_t           Event                   ; Event handle, or 0 if no event should be cancelled.
%enddef

#--------------------------------------
%defconstbitfield
description     Flags for Call_Priority_VM_Event (PEF_*)
description
description     Source: Windows 3.1 DDK, D:\386\INCLUDE\VMM.INC, line 1537 FLAGS FOR CALL_PRIORITY_VM_EVENT EQUates

#                                               default=1   default=(1<<width)-1
#       constant                    bit number  bit width   value   comment
def     PEF_Wait_For_STI_Bit        0                             ; Callback procedure is not called until VM enables interrupts
def     PEF_Wait_Not_Crit_Bit       1                             ; Callback procedure is not called until VM is not in a critical section or time-critical operation
def     PEF_Dont_Unboost_Bit        2                             ; Priority of the VM is not reduced after return from callback
def     PEF_Always_Sched_Bit        3                             ; Event is always scheduled, callback is never called immediately
def     PEF_Time_Out                4                             ; Use timeout value in EDI (Windows 3.1 or higher)
%enddef

#--------------------------------------
%defcall
byname          Call_Priority_VM_Event
description     Calls the callback procedure immediately, or schedules a priority event for the specified virtual machine.
description     Scheduling is done if the virtual device is processing a hardware interrupt that interrupted the VMM,
description     or the current virtual machine is not the specified VM, or if the Flags parameter specifies the
description     PEF_Always_Sched value.
description
description     PriorityBoost must be a value limited such that when added to the VM's current execution priority the result
description     is within range of Reserved_Low_Boost to Reserved_High_Boost.

in              EAX=int32_t                         PriorityBoost           ; positive, 0, or negative priority boost for the VM.
in              EBX=vxd_vm_handle_t                 VM                      ; VM handle
in              ECX                                 Flags                   ; how to carry out the event. See PEF_* constants, ORed together.
in              EDX=const+void*                     RefData                 ; pointer to reference data for callback
in              ESI=const+void*                     EventCallback           ; pointer to callback
in              EDI                                 TimeOut                 ; timeout in milliseconds IFF PEF_Time_Out is specified.

out             ESI=vxd_priority_vm_event_handle_t  .                       ; event handle, or 0 if procedure was called immediately.
%enddef

#--------------------------------------
%defcall
byname          Cancel_Priority_VM_Event
description     Cancels an event previously schedule by Call_Priority_VM_Event.
description     A virtual device must not attempt to cancel an event where the callback function has already been called.
description     Any priority boost will be cancelled even if PEF_Dont_Unboost_Bit was specified when the event was created.
description     Do NOT use this call to cancel events scheduled using the Call_VM_Event or Schedule_VM_Event services, for
description     those types of events you must use Cancel_VM_Event.

in              ESI=vxd_priority_vm_event_handle_t  Event                   ; event handle, or 0 if nothing to cancel
%enddef

#--------------------------------------
%defcall
byname          Get_NMI_Handler_Addr
description     Return the address of the current Non-Maskable Interrupt handler

out             ESI=const+void*         .                       ; pointer to current NMI handler
%enddef

#--------------------------------------
%defcall
byname          Set_NMI_Handler_Addr
description     Set the Non-Maskable Interrupt vector to point to the specified handler.
description     The NMI handler is forbidden to call any virtual device or VMM services and
description     it must restrict itself to access only local data in the VxD_LOCKED_DATA_SEG segment.
description     A virtual device that needs to use VMM services from NMI should instead use Hook_NMI_Event.
description
description     The handler must NOT execute the IRET instruction. It must jump to the previous NMI handler
description     that it retrieved from Get_NMI_Handler_Addr. x86 architecture design dictates that the CPU
description     ignores additional NMIs until it executes the IRET instruction.

in              ESI=const+void*         nmi                     ; pointer to NMI handler
%enddef

#--------------------------------------
%defcall
byname          Hook_NMI_Event
description     Install a Non-Maskable Interrupt event procedure. Event procedures are called in install
description     order after the last handler in the NMI handler chain has been executed. Event procedures
description     are allowed to make VMM calls that are not permitted in NMI handlers.
description
description     NMI event procedures can be interrupted by another NMI, reentrancy is possible.

in              ESI=const+void*         NmiProc                 ; pointer to NMI event handler
%enddef

#--------------------------------------
%defcall
byname          Call_When_VM_Ints_Enabled
description     Install a callback procedure that the system calls whenever the virtual machine enables interrupts.
description     The callback is called immediately if interrupts are already enabled. Virtual devices use this to
description     receive notification when the virtual machine enables interrupts.
description
description     It is usually more convenient to use Call_Priority_VM_Event, but this call is faster.

in              EDX=const+void*         RefData                 ; pointer to reference data to pass to callback
in              ESI=const+void*         Callback                ; pointer to callback function
%enddef

#--------------------------------------
%defcall
byname          Enable_VM_Ints
description     Enable interrupts for the current virtual machine. It has the same effect as if the VM had executed the STI instruction.
%enddef

#--------------------------------------
%defcall
byname          Disable_VM_Ints
description     Disable interrupts for the current virtual machine. It has the same effect as if the VM had executed the CLI instruction.
%enddef

#--------------------------------------
%defcall
byname          Map_Flat
description     Convert a segment:offset or selector:offset pair to a linear address only for the current virtual machine.
description     The segment is converted as a V86 segment, or protected mode selector, depending on the execution state of the virtual machine.
description     If the virtual machine is running 32-bit protected mode code, then the full 32 bits of the register are used.
description     For 16-bit protected mode and V86 code, only the lower 16 bits are used.
description
description     The parameter in this function is the full 16-bit contents of register AX, which contains the two 8-bit values stored in AH and AL.
description     AH is SegOffset, the byte offset from the start of the Client_Reg_Struc structure to the segment/selector register to convert.
description     AL is OffOffset, the byte offset from the start of the Client_Reg_Struc structure to the register with the offset to convert.
description     If AL is -1 (0xFF), then 0 is used as the offset of the address to convert (NOT the offset into the Client_Reg_Struc)
description
description     To form the parameter correctly for this function:
description
description     Map_Flat((SegOffset << 8) + OffOffset);
description
description     The linear address returned is the ring-0 linear address that corresponds to the segment:offset address specified.

in              AX                      SegOffOffset            ; AX = [AH,AL] 16-bit value, AH=SegOffset AL=OffOffset

out             EAX                     .                       ; linear address, or -1 (0xFFFFFFFF) if invalid
%enddef

#--------------------------------------
%defcall
byname          Map_Lin_To_VM_Addr
description     Convert a 32-bit ring-0 linear address to a V86 or protected mode address appropriate
description     for the current execution mode of the current virtual machine.
description
description     If the execution state of the virtual machine is V86 mode, then the returned pair is a segment:offset value.
description     This call will fail in V86 mode if the linear address is outside the 1MB limit of the
description     current virtual machine's 1MB virtual 8086 mode address space.
description
description     If the execution state of the virtual machine is protected mode, then the
description     returned pair is a selector:offset value produced by creating a new entry in the
description     virtual machine's LDT (Local Descriptor Table).
description
description     A device must never free a selector returned by this service. There is no function to free the mapping. Use this function sparingly.

in              EAX=const+void*         LineAddr                ; Linear address to convert
in              ECX                     Limit                   ; segment limit in bytes - 1 (a value of 0 means 1 byte long)

out             CF                      error                   ; CF set if error, clear if success
out             CX                      SegSel                  ; segment/selector if success
out             EDX                     Offset                  ; address offset
%enddef

#--------------------------------------
%defcall
byname          Adjust_Exec_Priority
description     Raise or lower the execution priority of the specified virtual machine.

in              EAX=int32_t             PriorityBoost           ; *_Boost constant value
in              EBX=vxd_vm_handle_t     VM                      ; VM handle
%enddef

#--------------------------------------
%defconstbitfield
description     Flags for Begin_Critical_Section (Block_*)
description
description     Source: Windows 3.1 DDK, D:\386\INCLUDE\VMM.INC, line 1553

#                                                   default=1   default=(1<<width)-1
#       constant                        bit number  bit width   value   comment
def     Block_Svc_Ints_Bit              0                             ; Service interrupts in the virtual machine even if the virtual machine is blocked
def     Block_Svc_If_Ints_Locked_Bit    1                             ; Service interrupts in the virtual machine even if the virtual machine is blocked and the VMStat_V86IntsLocked flag is set.
def     Block_Enable_Ints_Bit           2                             ; Service interrupts in the virtual machine even if the virtual machine does not currently have interrupts enabled. Force interrupts to be enabled. Only relevant if (Svc_Ints_Bit | Svc_If_Ints_Locked_Bit) is set
def     Block_Poll_Bit                  3                             ; Do not switch away from the blocked virtual machine unless another machine has higher priority.
%enddef

#--------------------------------------
%defcall
byname          Begin_Critical_Section
description     Cause the current virtual machine to enter a critical section.
description     Only one virtual machine can own the critical section at a time.
description     This call will block until the critical section is available.
description     The system maintains a count of critical section claim calls.
description     The critical section is only released when the count is reduced to zero by End_Critical_Section.
description     Claiming the critical section boosts the priority of the current VM by Critical_Section_Boost.
description     While in a critical section, the system will task switch only if the virtual machine blocks
description     on a semaphore or the other task has a time-critical operation.

in              ECX                     Flags                   ; flags for service. See Block_* constants.
%enddef

#--------------------------------------
%defcall
byname          End_Critical_Section
description     Release the critical section if claim count is reduced to zero.
description     Calling this function decrements the claim count, and releases the critical section if the result is zero.
description     Releasing the critical section also lowers the execution priority of the current virtual machine,
description     and may cause a task switch if a higher-priority non-suspended virtual machine is waiting.
%enddef

#--------------------------------------
%defcall
byname          End_Crit_And_Suspend
description     Release the critical section and immediately suspend the current virtual machine.
description     If the claim count is not 1 (and therefore the call will not release the section), the function will fail
description     and not change the claim count and return an error. If the system cannot suspend the virtual machine,
description     then it will return an error.

out             !CF                     .                       ; CF set if error (not released), CF clear if success

return          Bool true if success, false if error
%enddef

#--------------------------------------
%defcall
byname          Claim_Critical_Section
description     Increment the critical section claim count by the specified amount (as if calling Begin_Critical_Section by that many times)

in              EAX                     Claims                  ; how much to increment. zero is valid, but ignored
in              ECX                     Flags                   ; Block_* constants
%enddef

#--------------------------------------
%defcall
byname          Release_Critical_Section
description     Decrement the critical section claim count by the specified amount (as if calling End_Critical_Section by that many times)

in              ECX                     Claims                  ; how much to decrement. zero is valid, but ignored
%enddef

#--------------------------------------
%defcall
byname          Call_When_Not_Critical
description     Install a critical section callback to be called when a virtual device releases the critical section.
description     The callback is not executed until the current VM's execution priority is less than Critical_Section_Boost
description     even if the current virtual machine is not in a critical section, so that virtual devices can release
description     a critical section and process any simulated interrupts before the system calls the callback procedure.
description     Any number of callbacks can be installed, but the system will only call the most recent callback, and then
description     remove it from the list.

in              ESI=const+void*         CritSecCallback         ; pointer to callback procedure
in              EDX=const+void*         RefData                 ; pointer to reference data to pass to callback
%enddef

#--------------------------------------
%defcall
byname          Create_Semaphore
description     Allocate and initialize a new semaphore.

in              ECX                             TokenCount              ; initial token count

out             EAX=vxd_semaphore_handle_t      Semaphore               ; semaphore handle if CF=0
out             CF                              error                   ; CF set if error, CF clear if success
%enddef

#--------------------------------------
%defcall
byname          Destroy_Semaphore
description     Destroy the specified semaphore.

in              EAX=vxd_semaphore_handle_t      Semaphore               ; semaphore handle to delete
%enddef

#--------------------------------------
%defcall
byname          Wait_Semaphore
description     Block the current virtual machine (wait) until the semaphore is signaled using Signal_Semaphore service.

in              EAX=vxd_semaphore_handle_t      Semaphore               ; semaphore handle to wait on
in              ECX                             Flags                   ; Block_* constants
%enddef

#--------------------------------------
%defcall
byname          Signal_Semaphore
description     Unblocks the virtual machine (if any) waiting on the semaphore.

in              EAX=vxd_semaphore_handle_t      Semaphore               ; semaphore handle
%enddef

#--------------------------------------
%defcall
byname          Get_Crit_Section_Status
description     Returns the claim count and owner of the critical section.
description     If the claim count is zero, it returns VM == Current VM and Claims == 0.
async           no

out             EBX=vxd_vm_handle_t     VM                      ; VM handle of owner
out             ECX                     Claims                  ; number of times claimed
out             CF                      high_priority           ; CF set if priority is Critical_Section_Boost or higher
%enddef

#--------------------------------------
%defcall
byname          Call_When_Task_Switched
description     Install a task-switched callback procedure that is called whenever the system carries out a task switch.
description     Use this service sparingly and optimize the callback procedure for speed.
description     For use by virtual devices that must save the state of a hardware device every time a task switch occurs.
description     Virtual devices can install any number of callback procedures. The system calls each one in the order
description     installed until all have been called.

in              ESI=const+void*         TaskSwitchCallback      ; pointer to callback
%enddef

#--------------------------------------
%defcall
byname          Suspend_VM
description     Suspend the execution of a specific virtual machine.
description     An error occurs if the virtual machine is in a critical section or the VM specified is the system virtual machine.
description     This call increments the suspend count of the virtual machine. If the suspend count was zero, then
description     the virtual machine is suspended and virtual devices are notified of the suspension. Otherwise,
description     Suspend_VM only increments the value with no other effects.
description
description     Suspending the VM sets the CB_VM_Status field of the virtual machine's control block.

in              EBX=vxd_vm_handle_t     VM                      ; VM handle
out             !CF                     .                       ; CF set if not suspended (failure), clear if success

return          Bool true if suspended, false if failure
%enddef

#--------------------------------------
%defcall
byname          Resume_VM
description     Resume execution of a virtual machine suspended by Suspend_VM.
description     This call decrements the suspend count of the virtual machine. If the suspend count becomes zero,
description     then the virtual machine is placed into the ready-process queue. The system will task switch to
description     the resumed VM if the virtual machine has a higher priority than the current virtual machine.
description
description     The system notifies every virtual device of the request to resume. Any virtual device can deny
description     the request, which causes this service to return with CF set and the suspend count left at 1.
description
description     TODO: What does this return if the suspend count is greater than 1 and no other error occurs??

in              EBX=vxd_vm_handle_t     VM                      ; VM handle
out             !CF                     .                       ; CF set if error, clear if success

return          Bool true if success, false if error
%enddef

#--------------------------------------
%defcall
byname          No_Fail_Resume_VM
description     Resume execution of a virtual machine suspended by Suspend_VM.
description     If the virtual machine cannot be resumed for any reason, the system will notify the user and handle
description     the error automatically, resuming the virtual machine when there is sufficient memory available.

in              EBX=vxd_vm_handle_t     VM                      ; VM handle
%enddef

#--------------------------------------
%defcall
byname          Nuke_VM
description     Close a virtual machine that has not yet terminated.
description     This call will never return if the VM handle is the current VM or system VM.
description     If the VM handle specified is the system VM, the service will close Windows and return to MS-DOS.
description
description     This is typically used by the virtual shell service to close a virtual machine when the user
description     chooses the Terminate button from the virtual machine's Settings dialog box.
description
description     Use with caution.

in              EBX=vxd_vm_handle_t     VM                      ; VM handle
%enddef

#--------------------------------------
%defcall
byname          Crash_Cur_VM
description     Abruptly terminate (abort) the current VM.
description     A virtual device should call this function when a catastrophic error has occured,
description     such as executing an illegal instruction or attempting to program the hardware
description     in a way incompatible with the device virtualization.
description
description     If the system VM is the current VM, Windows will exit with a fatal error without
description     explicitly crashing the other VMs.
description
description     This call does not return.
%enddef

#--------------------------------------
%defcall
byname          Get_Execution_Focus
description     Return the handle of the virtual machine that currently has the execution focus,
description     also known as the foreground virtual machine.

out             EBX=vxd_vm_handle_t     .                       ; handle of foreground VM
%enddef

#--------------------------------------
%defcall
byname          Set_Execution_Focus
description     Assign execution focus to the specified virtual machine (make it the foreground VM).
description     The foreground VM will then execute with it's foreground priority. If the VM has
description     exclusive execution priority then it will become the only VM to receive time slices.
description     When a virtual machine receives the execution focus, the system suspends all other
description     virtual machines except the system virtual machine and background virtual machines.
description     Only the system VM can assign the execution focus to other VMs. A non-system VM
description     can only assign the execution focus to itself.

in              EBX=vxd_vm_handle_t     VM                      ; VM handle
out             !CF                     .                       ; CF set if focus cannot be set, clear otherwise

return          Bool true if focus was set, false otherwise
%enddef

#--------------------------------------
%defconstbitfield
description     Status flags in VM control block (VMStat_*)
description
description     Source: Windows 3.1 DDK, D:\386\INCLUDE\VMM.INC, line 448

#                                               default=1   default=(1<<width)-1
#       constant                    bit number  bit width   value   comment
def     VMStat_Exclusive_Bit        0                             ; VM is in exclusive mode
def     VMStat_Background_Bit       1                             ; VM runs in background
def     VMStat_Creating_Bit         2                             ; VM is in the process of creation
def     VMStat_Suspended_Bit        3                             ; VM is suspended (not scheduled)
def     VMStat_Not_Executeable_Bit  4                             ; VM is not executable (partially destroyed)
def     VMStat_PM_Exec_Bit          5                             ; VM is running protected-mode application
def     VMStat_PM_App_Bit           6                             ; Protected mode application is present in VM
def     VMStat_PM_Use32_Bit         7                             ; Protected-mode application is 32-bit
def     VMStat_VxD_Exec_Bit         8                             ; "Call from VxD"
def     VMStat_High_Pri_Back_Bit    9                             ; High-priority background
def     VMStat_Blocked_Bit          10                            ; VM is blocked on semaphore
def     VMStat_Awakening_Bit        11                            ; "Woke up after blocked" (FIXME: Woke? Awakening?)
def     VMStat_PageableV86Bit       12                            ; A part of the virtual 8086 VM is pageable
def     VMStat_V86IntsLockedBit     13                            ; "Rest of V86 is locked"
def     VMStat_TS_Sched_Bit         14                            ; Scheduled by time-slicer
def     VMStat_Idle_Bit             15                            ; VM has released time
def     VMStat_Closing_Bit          16                            ; VM is closing (Close_VM called for VM)

def     VMStat_Use32_Mask           7           2                 ; VMStat_PM_Use32 | VMStat_VxD_Exec
%enddef

#--------------------------------------
%defcall
byname          Get_Time_Slice_Priority
description     Return the time-slice execution flags, foreground and background priorities, and percent of CPU usage for a specific virtual machine.

in              EBX=vxd_vm_handle_t     VM                      ; VM handle
out             EAX                     Flags                   ; Status flags from the CB_VM_Status field of the VM control block (VMStat_*)
out             ECX                     Foreground              ; foreground time-slice priority (hi WORD is always 0)
out             EDX                     Background              ; background time-slice priority (hi WORD is always 0)
out             ESI                     CPUTime                 ; percentage of total CPU time used (or, maximum time the VM can run?? docs are a bit confusing.)
%enddef

#--------------------------------------
%defcall
byname          Set_Time_Slice_Priority
description     Set the time-slice execution flags, foreground and background priorities for a specific virtual machine.

in              EAX                     Flags                   ; status flags (VMStat_*)
in              EBX=vxd_vm_handle_t     VM                      ; VM handle
in              ECX                     Foreground              ; foreground time-slice priority
in              EDX                     Background              ; background time-slice priority
out             !CF                     .                       ; CF set if failure, clear if success

return          Bool, true if success, false if failure
%enddef

#--------------------------------------
%defcall
byname          Get_Time_Slice_Granularity
description     Return the current time-slice granularity, the minimum millseconds a virtual machine runs before being rescheduled.

out             EAX                     .                       ; minimum time-slice in millseconds
%enddef

#--------------------------------------
%defcall
byname          Set_Time_Slice_Granularity
description     Set the minimum time-slice granularity, the minimum milliseconds a virtual machine runs before being rescheduled.

in              EAX                     Time                    ; minimum time-slice in milliseconds
%enddef

#--------------------------------------
%defcall
byname          Get_Time_Slice_Info
description     Return information about the number of virtual machines currently scheduled by the time-slicer, and number that are idle.
async           yes

out             EAX                     Scheduled               ; number of virtual machines scheduled
out             EBX                     Current                 ; handle of currently scheduled virtual machine
out             ECX                     Idle                    ; number of idle virtual machines
%enddef

#--------------------------------------
%defcall
byname          Adjust_Execution_Time
description     Adjust the amount of execution time a virtual machine is granted with each time slice.
description     The effect is the same on all virtual machines regardless of their time-slot priority.

in              EAX                     Time                    ; number of milliseconds
in              EBX=vxd_vm_handle_t     VM                      ; VM handle
%enddef

#--------------------------------------
%defcall
byname          Release_Time_Slice
description     Discard remaining time in the current time-slice, and start a new time slice for the next virtual machine in the time-slice queue.
%enddef

#--------------------------------------
%defcall
byname          Wake_Up_VM
description     Restore an idle virtual machine, allowing the system to schedule the VM for subsequent time-slices.
description     A VM is idle if it has called Release_Time_Slice or has set the VMStat_Idle flag in the CB_VM_Status field of the control block.

in              EBX=vxd_vm_handle_t     VM                      ; VM handle
%enddef

#--------------------------------------
%defcall
byname          Call_When_Idle
description     Install a system-wide callback procedure to call when the kernel signals that Windows is idle and all other VMs are idle.

in              ESI=const+void*         IdleCallback            ; pointer to idle callback

out             !CF                     .                       ; CF set if not installed, clear if installed

return          Bool, true if installed, false if not installed
%enddef

#--------------------------------------
%defcall
byname          Get_Next_VM_Handle
description     Return the handle of the next virtual machine in the VM list maintained by the system.
description     Each VM only appears once, but no particular order is guaranteed.
description     The list is circular, so you must check for and stop when the first value comes back around.

in              EBX=vxd_vm_handle_t     VM                      ; VM handle

out             EBX=vxd_vm_handle_t     .                       ; next VM handle
%enddef

#--------------------------------------
%defcall
byname          Set_Global_Time_Out
description     Schedule a time-out to occur after the specified number of milliseconds have elapsed.

in              EAX                             Time                    ; number of milliseconds to time-out
in              EDX=const+void*                 RefData                 ; pointer to reference data to pass to callback
in              ESI=const+void*                 TimeOutCallback         ; pointer to callback procedure

out             ESI=vxd_timeout_handle_t        .                       ; timeout handle
%enddef

