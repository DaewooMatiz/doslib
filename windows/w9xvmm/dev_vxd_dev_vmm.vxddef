%header

VXDDEVNAME      VMM
DeviceID        0x0001
MinWinVer       3.0
description     Windows Virtual Machine Manager
description
description     This is "built in" to the kernel and is a core device of the Windows system.
description
description     File location (Windows 3.0/3.1): C:\WINDOWS\SYSTEM\WIN386.EXE
description     File location (Windows 95/98/ME): C:\WINDOWS\SYSTEM\VMM32.VXD
description
description     References:
description
description     * Windows 3.1 DDK (CD-ROM drive D) D:\386\INCLUDE\VMM.INC
description     - "VMM.INC - Include file for Virtual Machine Manager"
description     - "Version 1.00 - 05-May-1988 - By RAL"

%endheader

#--------------------------------------
%defcall
byname          Get_VMM_Version
description     Return VMM version

# no inputs

out             AX      version                                 ; major, minor (example: 0x030A = 3.10)
out             ECX     debug_dev_rev                           ; debug development revision number
%enddef

#--------------------------------------
%defcall
byname          Get_Cur_VM_Handle
description     Return current VM handle

# no inputs

out             EBX=vxd_vm_handle_t     .                       ; Handle of the current VM

return          Current VM handle
%enddef

#--------------------------------------
%defcall
byname          Test_Cur_VM_Handle
description     Test whether VM handle is current VM

in              EBX=vxd_vm_handle_t     vmhandle                ; VM handle to test

out             ZF                      .                       ; ZF set if vm handle matches

return          Boolean value. True if VM handle matches, false if not.
%enddef

#--------------------------------------
%defcall
byname          Get_Sys_VM_Handle
description     Return system VM handle

# no inputs

out             EBX=vxd_vm_handle_t     .                       ; Handle of the system VM

return          System VM handle
%enddef

#--------------------------------------
%defcall
byname          Test_Sys_VM_Handle
description     Test whether VM handle is system VM

in              EBX=vxd_vm_handle_t     vmhandle                ; VM handle to test

out             ZF                      .                       ; ZF set if vm handle matches

return          Boolean value. True if VM handle matches the one given, false if not.
%enddef

#--------------------------------------
%defcall
byname          Validate_VM_Handle
description     Verify that the VM handle is valid

in              EBX=vxd_vm_handle_t     vmhandle                ; VM handle to test

out             !CF                     .                       ; CF is set if NOT valid, clear if valid. Return value should invert sense.

return          Boolean value. True if VM handle is valid, false if invalid.
%enddef

#--------------------------------------
%defcall
byname          Get_VMM_Reenter_Count
description     Return the number of times the VMM has been reentered. If nonzero, use only asynchronous calls.

# no inputs

out             ECX     .                                       ; number of times VMM has been reentered
%enddef

#--------------------------------------
%defcall
byname          Begin_Reentrant_Execution
description     Start reentrant execution. You can use this when hooking VMM faults (reentrant processor faults)
description     in order to call non-asynchronous VMM or virtual device services or execute a virtual machine.
description     Do not use this service to avoid scheduling events on hardware interrupts.

# no inputs

out             ECX     .                                       ; old reentrancy count

return          unsigned int containing old reentrancy count, which must be saved and given to End_Reentrancy_Execution later on.
%enddef

#--------------------------------------
%defcall
byname          End_Reentrant_Execution
description     Ends reentrant execution, after Begin_Reentrant_Execution.

in              ECX     reentrancy_count                        ; reentrancy count returned by Begin_Reentrant_Execution
%enddef

#--------------------------------------
%defcall
byname          Install_V86_Break_Point
description     Insert a break point in virtual 8086 memory of the current virtual machine, and
description     insert a breakpoint callback procedure to receive control when the break point happens.

in              EAX=void*const          breakpoint_address      ; V86 address to place the break point
in              EDX=void*const          pointer_to_ref_data     ; pointer to reference data to be passed to callback procedure
in              ESI=void*const          callback_address        ; pointer to callback procedure to install (32-bit offset)

out             !CF                     .                       ; success (CF clear) or failure (CF set)

return          Bool, true if success, false if failure (not installed)
%enddef

#--------------------------------------
%defcall
byname          Remove_V86_Break_Point
description     Remove a virtual 8086 break point installed with Install_V86_Break_Point in the current VM

in              EAX=void*const          breakpoint_address      ; V86 address to remove break point from
%enddef

#--------------------------------------
%defcall
byname          Allocate_V86_Call_Back
description     Install a callback procedure for virtual 8086 mode applications can call to execute code in
description     a virtual device.

in              EDX=void*const          reference_data_ptr      ; points to reference data to pass to callback procedure
in              ESI=void*const          callback_procedure_ptr  ; points to callback procedure to call

out             CF                      error                   ; if success, CF=0 and EAX=realmode ptr. if failure, CF=1
out             EAX                     realmode_cb_addr        ; if CF=0, segment:offset of real-mode callback address
%enddef

#--------------------------------------
%defcall
byname          Allocate_PM_Call_Back
description     Install a callback procedure for protected mode applications to call to execute code in a virtual device.

in              EDX=void*const          reference_data_ptr      ; points to reference data to pass to callback procedure
in              ESI=void*const          callback_procedure_ptr  ; points to callback procedure to call

out             CF                      error                   ; if success, CF=0 and EAX=realmode ptr. if failure, CF=1
out             EAX                     cb_addr                 ; if CF=0, address of callback procedure
%enddef

